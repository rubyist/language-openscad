'fileTypes': [
  'scad'
]
'foldingStartMarker': '/\\*\\*|\\{\\s*$'
'foldingStopMarker': '\\*\\*/|^\\s*\\}'
'name': 'OpenSCAD'
'patterns': [
  {
    'captures':
      '1':
        'name': 'keyword.control.scad'
    'match': '^(module)\\s.*$'
    'name': 'meta.function.scad'
  }
  {
    'match': '\\b(if|else|for|intersection_for|assign|render|function|include|use)\\b'
    'name': 'keyword.control.scad'
  }
  {
    'begin': '/\\*\\*(?!/)'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.scad'
    'end': '\\*/'
    'name': 'comment.block.documentation.scad'
  }
  {
    'begin': '/\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.scad'
    'end': '\\*/'
    'name': 'comment.block.scad'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.comment.scad'
    'match': '(//).*$\\n?'
    'name': 'comment.line.double-slash.scad'
  }
  {
    'begin': '"'
    'end': '"'
    'name': 'string.quoted.double.scad'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.scad'
      }
    ]
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.scad'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.scad'
    'name': 'string.quoted.single.scad'
    'patterns': [
      {
        'match': '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.scad'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.scad'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.scad'
    'name': 'string.quoted.double.scad'
    'patterns': [
      {
        'match': '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.scad'
      }
    ]
  }
  {
    'match': '\\b(abs|acos|asin|atan|atan2|ceil|cos|exp|floor|len|let|ln|log|max|min|pow|rands|round|sign|sin|sqrt|tan)\\b'
    'name': 'support.function.mathematical.scad'
  }
  {
    'match': '\\b(circle|square|polygon|text|cube|sphere|cylinder|polyhedron)\\b'
    'name': 'support.function.shape.scad'
  }
  {
    'match': '\\b(scale|rotate|translate|resize|mirror|multimatrix|color|minkowski|hull)\\b'
    'name': 'support.function.transformation.scad'
  }
  {
    'match': '\\b(union|difference|intersection)\\b'
    'name': 'support.function.boolean.scad'
  }
  {
    'match': '\\b(echo|concat|lookup|str|chr|search|version|version_num|norm|cross|parent_module|import|linear_extrude|rotate_extrude|surface|projection|children)\\b'
    'name': 'support.function.scad'
  }
  {
    'match': '\\;'
    'name': 'punctuation.terminator.statement.scad'
  }
  {
    'match': ',[ |\\t]*'
    'name': 'meta.delimiter.object.comma.scad'
  }
  {
    'match': '\\.'
    'name': 'meta.delimiter.method.period.scad'
  }
  {
    'match': '\\{|\\}'
    'name': 'meta.brace.curly.scad'
  }
  {
    'match': '\\(|\\)'
    'name': 'meta.brace.round.scad'
  }
  {
    'match': '\\[|\\]'
    'name': 'meta.brace.square.scad'
  }
  {
    'match': '!|\\$|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\\^=|\\b(in|instanceof|new|delete|typeof|void)\\b'
    'name': 'keyword.operator.scad'
  }
  {
    'match': '\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b'
    'name': 'constant.numeric.scad'
  }
  {
    'match': '\\btrue\\b'
    'name': 'constant.language.boolean.true.scad'
  }
  {
    'match': '\\bfalse\\b'
    'name': 'constant.language.boolean.false.scad'
  }
]
'scopeName': 'source.scad'
